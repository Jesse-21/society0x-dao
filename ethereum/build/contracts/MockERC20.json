{
  "contractName": "MockERC20",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.7+commit.6da8b019\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/jaywelsh/GitHub/society0x/ethereum/contracts/mock/MockERC20.sol\":\"MockERC20\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/jaywelsh/GitHub/society0x/ethereum/contracts/mock/MockERC20.sol\":{\"keccak256\":\"0x35b05d2cb628a5ca91bd273020726b0b813375bd3ef8e7a61378363c8245b6d0\",\"urls\":[\"bzzr://84ae6b72af4713c0cbcdf241eff5717ff3004953c1a85488882a9a321d789bec\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x4d2395bda94bb5bb6c524ecda59f07fd6a6d754277e9982143c3858e35145189\",\"urls\":[\"bzzr://5d8b1a44381d54d7c5db45eeb163e74a1c8f61152780eb0769442fbd19aeb52b\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xd55e3d85f62c85440462699afc6dce60fa0a889ca9c52ff0139a0ab0373c1ffa\",\"urls\":[\"bzzr://c6c51d89257be787cf65f50a7268b1f3f0ac7876c9278f3cacee23e814eb05c8\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611562806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b0576000357c01000000000000000000000000000000000000000000000000000000009004806340c10f191161008357806340c10f191461016357806370a082311461017f578063a457c2d7146101af578063a9059cbb146101df578063dd62ed3e1461020f576100b0565b8063095ea7b3146100b557806318160ddd146100e557806323b872dd146101035780633950935114610133575b600080fd5b6100cf60048036036100ca919081019061108b565b61023f565b6040516100dc91906113af565b60405180910390f35b6100ed6103a0565b6040516100fa91906114aa565b60405180910390f35b61011d6004803603610118919081019061103c565b6103aa565b60405161012a91906113af565b60405180910390f35b61014d6004803603610148919081019061108b565b6105b2565b60405161015a91906113af565b60405180910390f35b61017d6004803603610178919081019061108b565b61081d565b005b61019960048036036101949190810190610fd7565b61082b565b6040516101a691906114aa565b60405180910390f35b6101c960048036036101c4919081019061108b565b610873565b6040516101d691906113af565b60405180910390f35b6101f960048036036101f4919081019061108b565b610ade565b60405161020691906113af565b60405180910390f35b61022960048036036102249190810190611000565b610af5565b60405161023691906114aa565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a79061144a565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161038e91906114aa565b60405180910390a36001905092915050565b6000600254905090565b600061043b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b7c90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506104c6848484610bd2565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161059f91906114aa565b60405180910390a3600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a9061148a565b60405180910390fd5b6106b282600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dd290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161080b91906114aa565b60405180910390a36001905092915050565b6108278282610e27565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108db906113ca565b60405180910390fd5b61097382600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b7c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610acc91906114aa565b60405180910390a36001905092915050565b6000610aeb338484610bd2565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115610bc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb8906113ea565b60405180910390fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c399061140a565b60405180910390fd5b610c93816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b7c90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d26816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dd290919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610dc591906114aa565b60405180910390a3505050565b600080828401905083811015610e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e149061146a565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8e9061142a565b60405180910390fd5b610eac81600254610dd290919063ffffffff16565b600281905550610f03816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dd290919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610fa391906114aa565b60405180910390a35050565b6000610fbb82356114ec565b905092915050565b6000610fcf823561151e565b905092915050565b600060208284031215610fe957600080fd5b6000610ff784828501610faf565b91505092915050565b6000806040838503121561101357600080fd5b600061102185828601610faf565b925050602061103285828601610faf565b9150509250929050565b60008060006060848603121561105157600080fd5b600061105f86828701610faf565b935050602061107086828701610faf565b925050604061108186828701610fc3565b9150509250925092565b6000806040838503121561109e57600080fd5b60006110ac85828601610faf565b92505060206110bd85828601610fc3565b9150509250929050565b6110d0816114d6565b82525050565b60006110e36044836114c5565b91507f45524332303a3a6465637265617365416c6c6f77616e63653a2043616e6e6f7460008301527f20646563726561736520616c6c6f77616e636520666f7220616464726573732060208301527f7a65726f000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600061116f6020836114c5565b91507f536166654d6174683a3a7375623a20496e746567657220756e646572666c6f776000830152602082019050919050565b60006111af6031836114c5565b91507f45524332303a3a5f7472616e736665723a2043616e6e6f74207472616e73666560008301527f7220746f2061646472657373207a65726f0000000000000000000000000000006020830152604082019050919050565b60006112156029836114c5565b91507f45524332303a3a5f6d696e743a2043616e6e6f74206d696e7420746f2061646460008301527f72657373207a65726f00000000000000000000000000000000000000000000006020830152604082019050919050565b600061127b602b836114c5565b91507f45524332303a3a617070726f76653a2043616e6e6f7420617070726f7665206160008301527f646472657373207a65726f0000000000000000000000000000000000000000006020830152604082019050919050565b60006112e1601f836114c5565b91507f536166654d6174683a3a6164643a20496e7465676572206f766572666c6f77006000830152602082019050919050565b60006113216044836114c5565b91507f45524332303a3a696e637265617365416c6c6f77616e63653a2043616e6e6f7460008301527f20696e63726561736520616c6c6f77616e636520666f7220616464726573732060208301527f7a65726f000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6113a9816114e2565b82525050565b60006020820190506113c460008301846110c7565b92915050565b600060208201905081810360008301526113e3816110d6565b9050919050565b6000602082019050818103600083015261140381611162565b9050919050565b60006020820190508181036000830152611423816111a2565b9050919050565b6000602082019050818103600083015261144381611208565b9050919050565b600060208201905081810360008301526114638161126e565b9050919050565b60006020820190508181036000830152611483816112d4565b9050919050565b600060208201905081810360008301526114a381611314565b9050919050565b60006020820190506114bf60008301846113a0565b92915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b60006114f7826114fe565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600081905091905056fea265627a7a72305820d9ba195ef102c82415393a3fe7c3af08bd86126e19a246c0889ac932fb463d536c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b0576000357c01000000000000000000000000000000000000000000000000000000009004806340c10f191161008357806340c10f191461016357806370a082311461017f578063a457c2d7146101af578063a9059cbb146101df578063dd62ed3e1461020f576100b0565b8063095ea7b3146100b557806318160ddd146100e557806323b872dd146101035780633950935114610133575b600080fd5b6100cf60048036036100ca919081019061108b565b61023f565b6040516100dc91906113af565b60405180910390f35b6100ed6103a0565b6040516100fa91906114aa565b60405180910390f35b61011d6004803603610118919081019061103c565b6103aa565b60405161012a91906113af565b60405180910390f35b61014d6004803603610148919081019061108b565b6105b2565b60405161015a91906113af565b60405180910390f35b61017d6004803603610178919081019061108b565b61081d565b005b61019960048036036101949190810190610fd7565b61082b565b6040516101a691906114aa565b60405180910390f35b6101c960048036036101c4919081019061108b565b610873565b6040516101d691906113af565b60405180910390f35b6101f960048036036101f4919081019061108b565b610ade565b60405161020691906113af565b60405180910390f35b61022960048036036102249190810190611000565b610af5565b60405161023691906114aa565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a79061144a565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161038e91906114aa565b60405180910390a36001905092915050565b6000600254905090565b600061043b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b7c90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506104c6848484610bd2565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161059f91906114aa565b60405180910390a3600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a9061148a565b60405180910390fd5b6106b282600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dd290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161080b91906114aa565b60405180910390a36001905092915050565b6108278282610e27565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108db906113ca565b60405180910390fd5b61097382600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b7c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610acc91906114aa565b60405180910390a36001905092915050565b6000610aeb338484610bd2565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115610bc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb8906113ea565b60405180910390fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c399061140a565b60405180910390fd5b610c93816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b7c90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d26816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dd290919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610dc591906114aa565b60405180910390a3505050565b600080828401905083811015610e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e149061146a565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8e9061142a565b60405180910390fd5b610eac81600254610dd290919063ffffffff16565b600281905550610f03816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610dd290919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610fa391906114aa565b60405180910390a35050565b6000610fbb82356114ec565b905092915050565b6000610fcf823561151e565b905092915050565b600060208284031215610fe957600080fd5b6000610ff784828501610faf565b91505092915050565b6000806040838503121561101357600080fd5b600061102185828601610faf565b925050602061103285828601610faf565b9150509250929050565b60008060006060848603121561105157600080fd5b600061105f86828701610faf565b935050602061107086828701610faf565b925050604061108186828701610fc3565b9150509250925092565b6000806040838503121561109e57600080fd5b60006110ac85828601610faf565b92505060206110bd85828601610fc3565b9150509250929050565b6110d0816114d6565b82525050565b60006110e36044836114c5565b91507f45524332303a3a6465637265617365416c6c6f77616e63653a2043616e6e6f7460008301527f20646563726561736520616c6c6f77616e636520666f7220616464726573732060208301527f7a65726f000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600061116f6020836114c5565b91507f536166654d6174683a3a7375623a20496e746567657220756e646572666c6f776000830152602082019050919050565b60006111af6031836114c5565b91507f45524332303a3a5f7472616e736665723a2043616e6e6f74207472616e73666560008301527f7220746f2061646472657373207a65726f0000000000000000000000000000006020830152604082019050919050565b60006112156029836114c5565b91507f45524332303a3a5f6d696e743a2043616e6e6f74206d696e7420746f2061646460008301527f72657373207a65726f00000000000000000000000000000000000000000000006020830152604082019050919050565b600061127b602b836114c5565b91507f45524332303a3a617070726f76653a2043616e6e6f7420617070726f7665206160008301527f646472657373207a65726f0000000000000000000000000000000000000000006020830152604082019050919050565b60006112e1601f836114c5565b91507f536166654d6174683a3a6164643a20496e7465676572206f766572666c6f77006000830152602082019050919050565b60006113216044836114c5565b91507f45524332303a3a696e637265617365416c6c6f77616e63653a2043616e6e6f7460008301527f20696e63726561736520616c6c6f77616e636520666f7220616464726573732060208301527f7a65726f000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6113a9816114e2565b82525050565b60006020820190506113c460008301846110c7565b92915050565b600060208201905081810360008301526113e3816110d6565b9050919050565b6000602082019050818103600083015261140381611162565b9050919050565b60006020820190508181036000830152611423816111a2565b9050919050565b6000602082019050818103600083015261144381611208565b9050919050565b600060208201905081810360008301526114638161126e565b9050919050565b60006020820190508181036000830152611483816112d4565b9050919050565b600060208201905081810360008301526114a381611314565b9050919050565b60006020820190506114bf60008301846113a0565b92915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b60006114f7826114fe565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600081905091905056fea265627a7a72305820d9ba195ef102c82415393a3fe7c3af08bd86126e19a246c0889ac932fb463d536c6578706572696d656e74616cf50037",
  "sourceMap": "139:126:28:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;139:126:28;;;;;;;",
  "deployedSourceMap": "139:126:28:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;139:126:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2735:285:34;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;936:89;;;:::i;:::-;;;;;;;;;;;;;;;;3483:294;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4280:389;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;174:88:28;;;;;;;;;;;;;;;;:::i;:::-;;1234:104:34;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5177:399;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1962:137;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1669:129;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2735:285;2800:4;2843:1;2824:21;;:7;:21;;;;2816:77;;;;;;;;;;;;;;;;;;;;;;2936:5;2904:8;:20;2913:10;2904:20;;;;;;;;;;;;;;;:29;2925:7;2904:29;;;;;;;;;;;;;;;:37;;;;2977:7;2956:36;;2965:10;2956:36;;;2986:5;2956:36;;;;;;;;;;;;;;;3009:4;3002:11;;2735:285;;;;:::o;936:89::-;980:7;1006:12;;999:19;;936:89;:::o;3483:294::-;3562:4;3607:37;3638:5;3607:8;:14;3616:4;3607:14;;;;;;;;;;;;;;;:26;3622:10;3607:26;;;;;;;;;;;;;;;;:30;;:37;;;;:::i;:::-;3578:8;:14;3587:4;3578:14;;;;;;;;;;;;;;;:26;3593:10;3578:26;;;;;;;;;;;;;;;:66;;;;3654:26;3664:4;3670:2;3674:5;3654:9;:26::i;:::-;3710:10;3695:54;;3704:4;3695:54;;;3722:8;:14;3731:4;3722:14;;;;;;;;;;;;;;;:26;3737:10;3722:26;;;;;;;;;;;;;;;;3695:54;;;;;;;;;;;;;;;3766:4;3759:11;;3483:294;;;;;:::o;4280:389::-;4360:4;4403:1;4384:21;;:7;:21;;;;4376:102;;;;;;;;;;;;;;;;;;;;;;4521:45;4555:10;4521:8;:20;4530:10;4521:20;;;;;;;;;;;;;;;:29;4542:7;4521:29;;;;;;;;;;;;;;;;:33;;:45;;;;:::i;:::-;4489:8;:20;4498:10;4489:20;;;;;;;;;;;;;;;:29;4510:7;4489:29;;;;;;;;;;;;;;;:77;;;;4602:7;4581:60;;4590:10;4581:60;;;4611:8;:20;4620:10;4611:20;;;;;;;;;;;;;;;:29;4632:7;4611:29;;;;;;;;;;;;;;;;4581:60;;;;;;;;;;;;;;;4658:4;4651:11;;4280:389;;;;:::o;174:88:28:-;234:21;240:7;249:5;234;:21::i;:::-;174:88;;:::o;1234:104:34:-;1289:7;1315:9;:16;1325:5;1315:16;;;;;;;;;;;;;;;;1308:23;;1234:104;;;:::o;5177:399::-;5262:4;5305:1;5286:21;;:7;:21;;;;5278:102;;;;;;;;;;;;;;;;;;;;;;5423:50;5457:15;5423:8;:20;5432:10;5423:20;;;;;;;;;;;;;;;:29;5444:7;5423:29;;;;;;;;;;;;;;;;:33;;:50;;;;:::i;:::-;5391:8;:20;5400:10;5391:20;;;;;;;;;;;;;;;:29;5412:7;5391:29;;;;;;;;;;;;;;;:82;;;;5509:7;5488:60;;5497:10;5488:60;;;5518:8;:20;5527:10;5518:20;;;;;;;;;;;;;;;:29;5539:7;5518:29;;;;;;;;;;;;;;;;5488:60;;;;;;;;;;;;;;;5565:4;5558:11;;5177:399;;;;:::o;1962:137::-;2023:4;2039:32;2049:10;2061:2;2065:5;2039:9;:32::i;:::-;2088:4;2081:11;;1962:137;;;;:::o;1669:129::-;1741:7;1767:8;:15;1776:5;1767:15;;;;;;;;;;;;;;;:24;1783:7;1767:24;;;;;;;;;;;;;;;;1760:31;;1669:129;;;;:::o;1279:181:33:-;1337:7;1369:1;1364;:6;;1356:51;;;;;;;;;;;;;;;;;;;;;;1417:9;1433:1;1429;:5;1417:17;;1452:1;1445:8;;;1279:181;;;;:::o;5790:309:34:-;5891:1;5877:16;;:2;:16;;;;5869:78;;;;;;;;;;;;;;;;;;;;;;5976:26;5996:5;5976:9;:15;5986:4;5976:15;;;;;;;;;;;;;;;;:19;;:26;;;;:::i;:::-;5958:9;:15;5968:4;5958:15;;;;;;;;;;;;;;;:44;;;;6028:24;6046:5;6028:9;:13;6038:2;6028:13;;;;;;;;;;;;;;;;:17;;:24;;;;:::i;:::-;6012:9;:13;6022:2;6012:13;;;;;;;;;;;;;;;:40;;;;6082:2;6067:25;;6076:4;6067:25;;;6086:5;6067:25;;;;;;;;;;;;;;;5790:309;;;:::o;1541:180:33:-;1599:7;1618:9;1634:1;1630;:5;1618:17;;1658:1;1653;:6;;1645:50;;;;;;;;;;;;;;;;;;;;;;1713:1;1706:8;;;1541:180;;;;:::o;6442:308:34:-;6535:1;6516:21;;:7;:21;;;;6508:75;;;;;;;;;;;;;;;;;;;;;;6609:23;6626:5;6609:12;;:16;;:23;;;;:::i;:::-;6594:12;:38;;;;6663:29;6686:5;6663:9;:18;6673:7;6663:18;;;;;;;;;;;;;;;;:22;;:29;;;;:::i;:::-;6642:9;:18;6652:7;6642:18;;;;;;;;;;;;;;;:50;;;;6728:7;6707:36;;6724:1;6707:36;;;6737:5;6707:36;;;;;;;;;;;;;;;6442:308;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;;57:66;;;;;130:118;;197:46;235:6;222:20;197:46;;;188:55;;182:66;;;;;255:241;;359:2;347:9;338:7;334:23;330:32;327:2;;;375:1;372;365:12;327:2;410:1;427:53;472:7;463:6;452:9;448:22;427:53;;;417:63;;389:97;321:175;;;;;503:366;;;624:2;612:9;603:7;599:23;595:32;592:2;;;640:1;637;630:12;592:2;675:1;692:53;737:7;728:6;717:9;713:22;692:53;;;682:63;;654:97;782:2;800:53;845:7;836:6;825:9;821:22;800:53;;;790:63;;761:98;586:283;;;;;;876:491;;;;1014:2;1002:9;993:7;989:23;985:32;982:2;;;1030:1;1027;1020:12;982:2;1065:1;1082:53;1127:7;1118:6;1107:9;1103:22;1082:53;;;1072:63;;1044:97;1172:2;1190:53;1235:7;1226:6;1215:9;1211:22;1190:53;;;1180:63;;1151:98;1280:2;1298:53;1343:7;1334:6;1323:9;1319:22;1298:53;;;1288:63;;1259:98;976:391;;;;;;1374:366;;;1495:2;1483:9;1474:7;1470:23;1466:32;1463:2;;;1511:1;1508;1501:12;1463:2;1546:1;1563:53;1608:7;1599:6;1588:9;1584:22;1563:53;;;1553:63;;1525:97;1653:2;1671:53;1716:7;1707:6;1696:9;1692:22;1671:53;;;1661:63;;1632:98;1457:283;;;;;;1747:111;1824:28;1846:5;1824:28;;;1819:3;1812:41;1806:52;;;1866:566;;2026:67;2090:2;2085:3;2026:67;;;2019:74;;2126:66;2122:1;2117:3;2113:11;2106:87;2227:66;2222:2;2217:3;2213:12;2206:88;2328:66;2323:2;2318:3;2314:12;2307:88;2423:2;2418:3;2414:12;2407:19;;2012:420;;;;2441:364;;2601:67;2665:2;2660:3;2601:67;;;2594:74;;2701:66;2697:1;2692:3;2688:11;2681:87;2796:2;2791:3;2787:12;2780:19;;2587:218;;;;2814:465;;2974:67;3038:2;3033:3;2974:67;;;2967:74;;3074:66;3070:1;3065:3;3061:11;3054:87;3175:66;3170:2;3165:3;3161:12;3154:88;3270:2;3265:3;3261:12;3254:19;;2960:319;;;;3288:465;;3448:67;3512:2;3507:3;3448:67;;;3441:74;;3548:66;3544:1;3539:3;3535:11;3528:87;3649:66;3644:2;3639:3;3635:12;3628:88;3744:2;3739:3;3735:12;3728:19;;3434:319;;;;3762:465;;3922:67;3986:2;3981:3;3922:67;;;3915:74;;4022:66;4018:1;4013:3;4009:11;4002:87;4123:66;4118:2;4113:3;4109:12;4102:88;4218:2;4213:3;4209:12;4202:19;;3908:319;;;;4236:364;;4396:67;4460:2;4455:3;4396:67;;;4389:74;;4496:66;4492:1;4487:3;4483:11;4476:87;4591:2;4586:3;4582:12;4575:19;;4382:218;;;;4609:566;;4769:67;4833:2;4828:3;4769:67;;;4762:74;;4869:66;4865:1;4860:3;4856:11;4849:87;4970:66;4965:2;4960:3;4956:12;4949:88;5071:66;5066:2;5061:3;5057:12;5050:88;5166:2;5161:3;5157:12;5150:19;;4755:420;;;;5183:120;5266:31;5291:5;5266:31;;;5261:3;5254:44;5248:55;;;5310:201;;5422:2;5411:9;5407:18;5399:26;;5436:65;5498:1;5487:9;5483:17;5474:6;5436:65;;;5393:118;;;;;5518:407;;5709:2;5698:9;5694:18;5686:26;;5759:9;5753:4;5749:20;5745:1;5734:9;5730:17;5723:47;5784:131;5910:4;5784:131;;;5776:139;;5680:245;;;;5932:407;;6123:2;6112:9;6108:18;6100:26;;6173:9;6167:4;6163:20;6159:1;6148:9;6144:17;6137:47;6198:131;6324:4;6198:131;;;6190:139;;6094:245;;;;6346:407;;6537:2;6526:9;6522:18;6514:26;;6587:9;6581:4;6577:20;6573:1;6562:9;6558:17;6551:47;6612:131;6738:4;6612:131;;;6604:139;;6508:245;;;;6760:407;;6951:2;6940:9;6936:18;6928:26;;7001:9;6995:4;6991:20;6987:1;6976:9;6972:17;6965:47;7026:131;7152:4;7026:131;;;7018:139;;6922:245;;;;7174:407;;7365:2;7354:9;7350:18;7342:26;;7415:9;7409:4;7405:20;7401:1;7390:9;7386:17;7379:47;7440:131;7566:4;7440:131;;;7432:139;;7336:245;;;;7588:407;;7779:2;7768:9;7764:18;7756:26;;7829:9;7823:4;7819:20;7815:1;7804:9;7800:17;7793:47;7854:131;7980:4;7854:131;;;7846:139;;7750:245;;;;8002:407;;8193:2;8182:9;8178:18;8170:26;;8243:9;8237:4;8233:20;8229:1;8218:9;8214:17;8207:47;8268:131;8394:4;8268:131;;;8260:139;;8164:245;;;;8416:213;;8534:2;8523:9;8519:18;8511:26;;8548:71;8616:1;8605:9;8601:17;8592:6;8548:71;;;8505:124;;;;;8637:163;;8752:6;8747:3;8740:19;8789:4;8784:3;8780:14;8765:29;;8733:67;;;;;8808:92;;8888:5;8881:13;8874:21;8863:32;;8857:43;;;;8907:79;;8976:5;8965:16;;8959:27;;;;8993:105;;9062:31;9087:5;9062:31;;;9051:42;;9045:53;;;;9105:128;;9185:42;9178:5;9174:54;9163:65;;9157:76;;;;9240:79;;9309:5;9298:16;;9292:27;;;",
  "source": "pragma solidity 0.5.7;\npragma experimental ABIEncoderV2;\n\nimport { ERC20 } from \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\n\n\ncontract MockERC20 is ERC20 {\n\n    function mint(address account, uint value) public {\n        _mint(account, value);\n    }\n\n}",
  "sourcePath": "/Users/jaywelsh/GitHub/society0x/ethereum/contracts/mock/MockERC20.sol",
  "ast": {
    "absolutePath": "/Users/jaywelsh/GitHub/society0x/ethereum/contracts/mock/MockERC20.sol",
    "exportedSymbols": {
      "MockERC20": [
        7519
      ]
    },
    "id": 7520,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7500,
        "literals": [
          "solidity",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:28"
      },
      {
        "id": 7501,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "23:33:28"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 7503,
        "nodeType": "ImportDirective",
        "scope": 7520,
        "sourceUnit": 8251,
        "src": "58:78:28",
        "symbolAliases": [
          {
            "foreign": 7502,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7504,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8250,
              "src": "161:5:28",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$8250",
                "typeString": "contract ERC20"
              }
            },
            "id": 7505,
            "nodeType": "InheritanceSpecifier",
            "src": "161:5:28"
          }
        ],
        "contractDependencies": [
          8250,
          8319
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 7519,
        "linearizedBaseContracts": [
          7519,
          8250,
          8319
        ],
        "name": "MockERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 7517,
              "nodeType": "Block",
              "src": "224:38:28",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7513,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7507,
                        "src": "240:7:28",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 7514,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7509,
                        "src": "249:5:28",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 7512,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8164,
                      "src": "234:5:28",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 7515,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "234:21:28",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7516,
                  "nodeType": "ExpressionStatement",
                  "src": "234:21:28"
                }
              ]
            },
            "documentation": null,
            "id": 7518,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7510,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7507,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 7518,
                  "src": "188:15:28",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7506,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "188:7:28",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7509,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 7518,
                  "src": "205:10:28",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7508,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "205:4:28",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "187:29:28"
            },
            "returnParameters": {
              "id": 7511,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "224:0:28"
            },
            "scope": 7519,
            "src": "174:88:28",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 7520,
        "src": "139:126:28"
      }
    ],
    "src": "0:265:28"
  },
  "legacyAST": {
    "absolutePath": "/Users/jaywelsh/GitHub/society0x/ethereum/contracts/mock/MockERC20.sol",
    "exportedSymbols": {
      "MockERC20": [
        7519
      ]
    },
    "id": 7520,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7500,
        "literals": [
          "solidity",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:28"
      },
      {
        "id": 7501,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "23:33:28"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 7503,
        "nodeType": "ImportDirective",
        "scope": 7520,
        "sourceUnit": 8251,
        "src": "58:78:28",
        "symbolAliases": [
          {
            "foreign": 7502,
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 7504,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 8250,
              "src": "161:5:28",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$8250",
                "typeString": "contract ERC20"
              }
            },
            "id": 7505,
            "nodeType": "InheritanceSpecifier",
            "src": "161:5:28"
          }
        ],
        "contractDependencies": [
          8250,
          8319
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 7519,
        "linearizedBaseContracts": [
          7519,
          8250,
          8319
        ],
        "name": "MockERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 7517,
              "nodeType": "Block",
              "src": "224:38:28",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 7513,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7507,
                        "src": "240:7:28",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 7514,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7509,
                        "src": "249:5:28",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 7512,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8164,
                      "src": "234:5:28",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 7515,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "234:21:28",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7516,
                  "nodeType": "ExpressionStatement",
                  "src": "234:21:28"
                }
              ]
            },
            "documentation": null,
            "id": 7518,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7510,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7507,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 7518,
                  "src": "188:15:28",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7506,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "188:7:28",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7509,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 7518,
                  "src": "205:10:28",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7508,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "205:4:28",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "187:29:28"
            },
            "returnParameters": {
              "id": 7511,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "224:0:28"
            },
            "scope": 7519,
            "src": "174:88:28",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 7520,
        "src": "139:126:28"
      }
    ],
    "src": "0:265:28"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.7+commit.6da8b019.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2020-01-18T13:38:25.571Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}